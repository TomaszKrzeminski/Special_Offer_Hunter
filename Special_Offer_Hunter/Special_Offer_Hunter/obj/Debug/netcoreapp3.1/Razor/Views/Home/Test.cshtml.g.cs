#pragma checksum "C:\Users\tomek\Desktop\Repository_Special_Offer\Special_Offer_Hunter\Special_Offer_Hunter\Views\Home\Test.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5f0bf103d36272718c4b409737f09f836b677529"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Test), @"mvc.1.0.view", @"/Views/Home/Test.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tomek\Desktop\Repository_Special_Offer\Special_Offer_Hunter\Special_Offer_Hunter\Views\_ViewImports.cshtml"
using Special_Offer_Hunter;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\tomek\Desktop\Repository_Special_Offer\Special_Offer_Hunter\Special_Offer_Hunter\Views\_ViewImports.cshtml"
using Special_Offer_Hunter.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\tomek\Desktop\Repository_Special_Offer\Special_Offer_Hunter\Special_Offer_Hunter\Views\_ViewImports.cshtml"
using Special_Offer_Hunter.Components;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5f0bf103d36272718c4b409737f09f836b677529", @"/Views/Home/Test.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b031b71028ef41b39af5ecb29363207f489a3272", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Test : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/mobile-or-tablet.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/foldable.js.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/info-hint.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/searchbox-enter-submit.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n<!DOCTYPE html>\r\n<html class=\'use-all-space\'>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5f0bf103d36272718c4b409737f09f836b6775295237", async() => {
                WriteLiteral(@"
    <meta http-equiv='X-UA-Compatible' content='IE=Edge' />
    <meta charset='UTF-8'>
    <title>Maps SDK for Web - Waypoints</title>
    <meta name='viewport'
          content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no' />
    <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/maps/maps.css'>
    <link rel='stylesheet' type='text/css' href='../assets/ui-library/index.css' />
    <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/plugins/SearchBox/2.24.2//SearchBox.css' />

    <style>
        #foldable {
            width: 320px;
        }

        #form {
            margin-top: 10px;
        }

        .tt-icon-size {
            height: 18px !important;
            width: 18px !important;
        }

        .icon-spacing-right {
            margin-right: 12px;
            margin-top: 22px;
        }

        .icon-spacing-left {
            margin-left: 12px;
 ");
                WriteLiteral(@"           margin-top: 24px;
        }

        .route-input-container {
            display: flex;
        }

        button.add-stop-btn {
            margin-left: 30px;
            margin-top: 24px;
        }

        .remove-btn {
            background-color: transparent;
            border: 0;
        }

            .remove-btn.hidden {
                visibility: hidden;
            }

        .waypoint-marker {
            align-items: center;
            background-color: #4a90e2;
            border: solid 3px #2faaff;
            border-radius: 50%;
            color: #ffffff;
            display: flex;
            font-size: 14px;
            font-weight: bold;
            height: 32px !important;
            justify-content: center;
            text-align: center;
            width: 32px !important;
            will-change: unset !important;
        }

        .tt-icon-number {
            align-items: center;
            background: #ffffff;
            bac");
                WriteLiteral(@"kground-color: #8dc3eb;
            border-radius: 50%;
            color: #ffffff;
            display: flex;
            justify-content: center;
        }

        .tt-search-box-input {
            width: calc(100% - 15px) !important;
        }
    </style>



");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5f0bf103d36272718c4b409737f09f836b6775298603", async() => {
                WriteLiteral(@"
    <div id='map' class='map'>
        <div id='foldable' class='tt-overlay-panel -left-top -medium js-foldable'>
            <div id='form'>
                <div id='searchBoxesPlaceholder' class='tt-form-label'></div>
            </div>
        </div>
    </div>
");
                WriteLiteral("\r\n    <script src=\'https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/maps/maps-web.min.js\'></script>\r\n    <script src=\'https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/services/services-web.min.js\'></script>\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5f0bf103d36272718c4b409737f09f836b6775299405", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5f0bf103d36272718c4b409737f09f836b67752910504", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5f0bf103d36272718c4b409737f09f836b67752911604", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5f0bf103d36272718c4b409737f09f836b67752912704", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script src='https://api.tomtom.com/maps-sdk-for-web/cdn/plugins/SearchBox/2.24.2//SearchBox-web.js'></script>


    <script>
        var MAX_ROUTING_INPUTS = 7;
        var map = tt.map({
            key: '<your-tomtom-maps-API-key>',
            container: 'map',
            style: 'tomtom://vector/1/basic-main',
            dragPan: !isMobileOrTablet()
        });
        map.addControl(new tt.FullscreenControl());
        map.addControl(new tt.NavigationControl());
        new Foldable('#foldable', 'top-right');
        var routingInputs = [];
        var route;
        var markers = [];
        var errorHint = new InfoHint('error', 'bottom-center', 5000).addTo(document.getElementById('map'));
        var loadingHint = new InfoHint('info', 'bottom-center').addTo(document.getElementById('map'));

        function RoutingService() { }

        RoutingService.prototype.calculateRoute = function () {
            this.clearMarkers();
            if (route) {
                map.r");
                WriteLiteral(@"emoveLayer('route');
                map.removeSource('route');
                route = undefined;
            }
            var locations = this.getLocations();
            this.drawMarkers(locations.arr);
            if (locations.count < 2) {
                return;
            }
            loadingHint.setMessage('Loading...');
            tt.services.calculateRoute({
                key: '<your-tomtom-routing-API-key>',
                traffic: false,
                locations: locations.str
            })
                .go()
                .then(function (response) {
                    loadingHint.hide();
                    this.clearMarkers();
                    var geojson = response.toGeoJson();
                    route = map.addLayer({
                        'id': 'route',
                        'type': 'line',
                        'source': {
                            'type': 'geojson',
                            'data': geojson
                        },
 ");
                WriteLiteral(@"                       'paint': {
                            'line-color': '#2faaff',
                            'line-width': 6
                        }
                    }, this.findFirstBuildingLayerId());

                    var coordinates = geojson.features[0].geometry.coordinates;
                    if (geojson.features[0].properties.segmentSummary.length > 1) {
                        coordinates = [].concat.apply([], coordinates);
                    }

                    this.updateRoutesBounds(coordinates);
                    this.drawMarkers(locations.arr);
                }.bind(this))
                .catch(function (error) {
                    loadingHint.hide();
                    errorHint.setErrorMessage(error);
                });
        };

        RoutingService.prototype.clearMarkers = function () {
            markers.forEach(function (marker) {
                marker.remove();
            });
        };

        RoutingService.prototype.drawMarkers");
                WriteLiteral(@" = function (locations) {
            var bounds = new tt.LngLatBounds();
            var maxIndex = routingInputs.length - 1;
            if (locations.length === 0) {
                return;
            }

            routingInputs.forEach(function (input, index) {
                if (input.position) {
                    var marker = new tt.Marker(this.waypointMarker(index, maxIndex)).setLngLat(input.position).addTo(map);
                    markers.push(marker);
                    bounds.extend(tt.LngLat.convert(input.position));

                    if (input.viewport) {
                        input.viewport.forEach(function (viewport) {
                            bounds.extend(tt.LngLat.convert(viewport));
                        });
                    }
                }
            }, this);
            map.fitBounds(bounds, { duration: 0, padding: 100 });
        };

        RoutingService.prototype.findFirstBuildingLayerId = function () {
            var layers = map.getS");
                WriteLiteral(@"tyle().layers;
            for (var index in layers) {
                if (layers[index].type === 'fill-extrusion') {
                    return layers[index].id;
                }
            }

            throw new Error('Map style does not contain any layer with fill-extrusion type.');
        };

        RoutingService.prototype.getLocations = function () {
            var resultStr = '';
            var resultArr = [];
            var count = 0;
            routingInputs.forEach(function (routingInput) {
                if (routingInput.position) {
                    count += 1;
                    resultArr.push(routingInput.position);
                    resultStr += routingInput.position.lng + ',' + routingInput.position.lat + ':';
                }
            });
            resultStr = resultStr.substring(0, resultStr.length - 1);
            return {
                str: resultStr,
                count: count,
                arr: resultArr
            };
        };
");
                WriteLiteral(@"
        RoutingService.prototype.waypointMarker = function (index, total) {
            var container = document.createElement('div');
            container.className = 'waypoint-marker';
            if (index === 0) {
                container.className += ' tt-icon -start -white';
            } else if (index === total) {
                container.className += ' tt-icon -finish -white';
            } else {
                var number = document.createElement('div');
                number.innerText = index;
                container.appendChild(number);
            }
            return container;
        };

        RoutingService.prototype.updateRoutesBounds = function (coordinates) {
            var bounds = new tt.LngLatBounds();

            coordinates.forEach(function (point) {
                bounds.extend(tt.LngLat.convert(point));
            });

            if (!bounds.isEmpty()) {
                map.fitBounds(bounds, { duration: 0, padding: 100 });
            }
     ");
                WriteLiteral(@"   };

        function RoutingInput(options) {
            this.index = options.index;
            this.routingService = options.routingService;
            this.onRemoveBtnClick = options.onRemove.bind(this);
            this.container = this.createContainer();
            this.searchBox = this.createSearchBox();
            this.icon = this.createIconContainer();
            this.removeButton = this.createRemoveButton();
            this.container.appendChild(this.icon);
            this.container.appendChild(this.searchBox);
            this.container.appendChild(this.removeButton);
        }

        RoutingInput.prototype.createContainer = function () {
            var container = document.createElement('div');
            container.className = 'route-input-container';
            return container;
        };

        RoutingInput.prototype.createSearchBox = function () {
            var searchBox = new tt.plugins.SearchBox(tt.services, {
                showSearchButton: false,
");
                WriteLiteral(@"                searchOptions: {
                    key: '<your-tomtom-search-API-key>'
                },
                labels: {
                    placeholder: 'Query e.g. Washington'
                }
            });
            var htmlSearchBox = searchBox.getSearchBoxHTML();
            document.getElementById('searchBoxesPlaceholder').appendChild(htmlSearchBox);
            searchBox.on('tomtom.searchbox.resultscleared', this.onResultCleared.bind(this));

            searchBox.on('tomtom.searchbox.resultsfound', function (event) {
                handleEnterSubmit(event, this.onResultSelected.bind(this), errorHint);
            }.bind(this));

            searchBox.on('tomtom.searchbox.resultselected', function (event) {
                if (event.data && event.data.result) {
                    this.onResultSelected(event.data.result);
                }
            }.bind(this));

            return htmlSearchBox;
        };

        RoutingInput.prototype.getIconType = fun");
                WriteLiteral(@"ction () {
            var lastIdx = routingInputs.length - 1;
            switch (this.index) {
                case 0:
                    return 'start';
                case lastIdx:
                    return 'finish';
                default:
                    return 'number';
            }
        };

        RoutingInput.prototype.getIconClassName = function (iconType) {
            switch (iconType) {
                case 'start':
                    return 'tt-icon tt-icon-size icon-spacing-right -start';
                case 'finish':
                    return 'tt-icon tt-icon-size icon-spacing-right -finish';
                case 'number':
                    return 'tt-icon-number tt-icon-size icon-spacing-right icon-number';
            }
        };

        RoutingInput.prototype.createRemoveButton = function () {
            var button = document.createElement('button');
            button.className = 'tt-icon icon-spacing-left remove-btn -trash';
            butto");
                WriteLiteral(@"n.onclick = function (event) {
                event.preventDefault();
                this.container.parentNode.removeChild(this.container);
                routingInputs.splice(this.index, 1);
                this.onRemoveBtnClick();
            }.bind(this);
            return button;
        };

        RoutingInput.prototype.createIconContainer = function () {
            var icon = document.createElement('div');
            return icon;
        };

        RoutingInput.prototype.updateIcons = function () {
            var icon = document.createElement('div');
            var iconType = this.getIconType();
            icon.className = this.getIconClassName(iconType);

            if (iconType === 'number') {
                var number = document.createElement('div');
                number.innerText = this.index;
                icon.appendChild(number);
            }

            this.container.replaceChild(icon, this.icon);
            this.icon = icon;
            if (routin");
                WriteLiteral(@"gInputs.length <= 2) {
                this.removeButton.classList.add('hidden');
            } else {
                this.removeButton.classList.remove('hidden');
            }
        };

        RoutingInput.prototype.onResultCleared = function () {
            this.position = undefined;
            this.viewport = undefined;
            this.routingService.calculateRoute();
        };

        RoutingInput.prototype.onResultSelected = function (result) {
            this.position = result.position;
            this.viewport = [result.viewport.topLeftPoint, result.viewport.btmRightPoint];
            this.routingService.calculateRoute();
        };

        function Panel(routingService) {
            this.routingService = routingService;
            this.container = document.getElementById('form');
            this.createInput();
            this.createInput();
            this.createAddButton();
        }

        Panel.prototype.createWaypoint = function () {
            var");
                WriteLiteral(@" length = routingInputs.length;
            if (length === MAX_ROUTING_INPUTS) {
                errorHint.setMessage('You cannot add more waypoints in this example, but ' +
                    'the Routing service supports up to 150 waypoints.');
                return;
            }
            var index = length - 1;
            var routingInput = this.createRoutingInput(index);
            this.container.insertBefore(routingInput.container, routingInputs[length - 1].container);
            routingInputs.splice(index, 0, routingInput);
            this.updateRoutingInputIndexes();
            this.updateRoutingInputIcons();
        };

        Panel.prototype.createRoutingInput = function (index) {
            return new RoutingInput({
                index: index,
                onRemove: this.onRemoveBtnClick.bind(this),
                routingService: this.routingService
            });
        };

        Panel.prototype.createInput = function () {
            var index = routin");
                WriteLiteral(@"gInputs.length;
            var routingInput = this.createRoutingInput(index);
            this.container.appendChild(routingInput.container);
            routingInputs.push(routingInput);
            routingInput.updateIcons();
        };

        Panel.prototype.createAddButton = function () {
            var button = document.createElement('button');
            button.appendChild(document.createTextNode('ADD STOP'));
            button.className = 'tt-button -primary add-stop-btn';
            button.onclick = function (event) {
                event.preventDefault();
                this.createWaypoint();
            }.bind(this);
            this.container.appendChild(button);
        };

        Panel.prototype.onRemoveBtnClick = function () {
            this.updateRoutingInputIndexes();
            this.updateRoutingInputIcons();
            this.routingService.calculateRoute();
        };

        Panel.prototype.updateRoutingInputIndexes = function () {
            routingI");
                WriteLiteral(@"nputs.forEach(function (routingInput, index) {
                routingInput.index = index;
            });
        };

        Panel.prototype.updateRoutingInputIcons = function () {
            routingInputs.forEach(function (routingInput) {
                routingInput.updateIcons();
            });
        };

        var routingService = new RoutingService();
        map.on('load', function () {
            routingService.calculateRoute();
        });

        new Panel(routingService);
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
