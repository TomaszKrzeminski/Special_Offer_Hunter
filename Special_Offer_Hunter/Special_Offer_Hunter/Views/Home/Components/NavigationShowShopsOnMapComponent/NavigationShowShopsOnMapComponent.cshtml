@model ProductLocationViewModel


@*<meta http-equiv='X-UA-Compatible' content='IE=Edge' />
    <meta charset='UTF-8'>
    <title>Maps SDK for Web - Static route</title>
    <meta name='viewport'
          content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no' />*@
<link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/maps/maps.css'>
<link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/maps/css-styles/routing.css' />
<link href="~/css/index.css" rel="stylesheet" />

<style>
    .icon {
        background-size: cover;
        height: 30px;
        width: 30px;
    }

    .route-marker {
        align-items: center;
        background-color: #4a90e2;
        border: solid 3px #2faaff;
        border-radius: 50%;
        display: flex;
        height: 32px;
        justify-content: center;
        transition: width .1s, height .1s;
        width: 32px;
    }
</style>





<div class="col col-lg-12">
    <div class="row">
        <div class="col col-lg-12" >
            <div id='map' class='map' style="max-width:1050px;"></div>
        </div>


    </div>

    <div class="col col-lg-6">
        <div class="row">
            <div class="col col-lg-9">
                <h5>Długość trasy : @Model.Distance km      </h5>
            </div>
            <div class="col col-lg-3"></div>
        </div>
        <div class="row">
            <div class="col col-lg-9">
                <h5>Czas przejazdu : @Model.Time min   </h5>
            </div>
            <div class="col col-lg-3"></div>
        </div>
        <div class="row">
            <div class="col col-lg-9">
                <h5>Czas zakończenia zakupów : @Model.ArrivalTime  </h5>
            </div>
            <div class="col col-lg-3"></div>
        </div>

    </div>
    <div class="col col-lg-6"></div>
</div>


<input id="myTomTomKey" type="hidden" value="@ViewData["MyTomTomKey"]" />
<input id="myPositionLat" type="hidden" value="@ViewData["MyPositionLat"]" />
<input id="myPositionLon" type="hidden" value="@ViewData["MyPositionLon"]" />
<input id="Shops2" type="hidden" value="@Model.JsonShops" />


</div>

<script src='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/maps/maps-web.min.js'></script>
<script src='https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.69.1/services/services-web.min.js'></script>
<script src="~/js/mobile-or-tablet.js"></script>
<script>



    var myTomTomKey = document.getElementById('myTomTomKey').value;

    var myPLat = document.getElementById('myPositionLat').value;
    var myPLong = document.getElementById('myPositionLon').value;

    var HQ = { lat: myPLat, lng: myPLong }




    var map = tt.map({
        key: myTomTomKey,
        container: 'map',
        style: 'tomtom://vector/1/basic-main',
        dragPan: !isMobileOrTablet(),
        center: HQ,
        zoom: 15
    });
    map.addControl(new tt.FullscreenControl());
    map.addControl(new tt.NavigationControl());

    function createMarkerElement(type) {
        var element = document.createElement('div');
        var innerElement = document.createElement('div');

        element.className = 'route-marker';
        innerElement.className = 'icon tt-icon -white -' + type;
        element.appendChild(innerElement);
        return element;
    }

    function addMarkers(feature) {
        var startPoint, endPoint;
        if (feature.geometry.type === 'MultiLineString') {
            startPoint = feature.geometry.coordinates[0][0]; //get first point from first line
            endPoint = feature.geometry.coordinates.slice(-1)[0].slice(-1)[0]; //get last point from last line
        } else {
            startPoint = feature.geometry.coordinates[0];
            endPoint = feature.geometry.coordinates.slice(-1)[0];
        }

        new tt.Marker({ element: createMarkerElement('start') }).setLngLat(startPoint).addTo(map);
        new tt.Marker({ element: createMarkerElement('finish') }).setLngLat(endPoint).addTo(map);
    }

    function findFirstBuildingLayerId() {
        var layers = map.getStyle().layers;
        for (var index in layers) {
            if (layers[index].type === 'fill-extrusion') {
                return layers[index].id;
            }
        }

        throw new Error('Map style does not contain any layer with fill-extrusion type.');
    }



    var Shops2 = document.getElementById('Shops2').value;
    var obj = JSON.parse(Shops2);


    function MakeLocationElements(obj) {

        var text = "";




        for (var i = 0; i < obj.length; i++) {
            var l1 = obj[i].center[0];
            var l2 = obj[i].center[1];
            text += l2 + "," + l1 + ":";
        }

        text = text.substring(0, text.length - 1);
        return text;
    }


    var locationsChanges = MakeLocationElements(obj);




    map.once('load', function () {
        tt.services.calculateRoute({
            key: myTomTomKey,
            traffic: false,
            locations: locationsChanges
        })
            .go()
            .then(function (response) {
                var geojson = response.toGeoJson();
                map.addLayer({
                    'id': 'route',
                    'type': 'line',
                    'source': {
                        'type': 'geojson',
                        'data': geojson
                    },
                    'paint': {
                        'line-color': '#4a90e2',
                        'line-width': 8
                    }
                }, findFirstBuildingLayerId());

                addMarkers(geojson.features[0]);

                var bounds = new tt.LngLatBounds();
                geojson.features[0].geometry.coordinates.forEach(function (point) {
                    bounds.extend(tt.LngLat.convert(point));
                });
                map.fitBounds(bounds, { duration: 0, padding: 50 });
            });
    });


    for (var i = 0; i < obj.length; i++) {

        var place = obj[i];

        var d = { lat: place.center[0], lng: place.center[1] }

        var marker = new tt.Marker().setLngLat(d).addTo(map);

        var popupOffsets = {
            top: [0, 0],
            bottom: [0, -70],
            'bottom-right': [0, -70],
            'bottom-left': [0, -70],
            left: [25, -35],
            right: [-25, -35]
        }

        var popup = new tt.Popup({ offset: popupOffsets }).setHTML("<br/><b>" + place.name + "</b>");
        marker.setPopup(popup).togglePopup();
    }



</script>
